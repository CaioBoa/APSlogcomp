%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "parser.tab.h"  /* Include the header generated by Bison */
#include "nodes.h"       /* Include nodes.h to define 'Value' */
#include "symbol_table.h"

int expectvar = 0;
char *string_buffer = NULL;
int at_start = 0;
%}

%option noyywrap
%option caseless
%option noinput
%option nounput
%x STRING

%%

"///"(.|\n)*    { /* Ignora tudo após '///' */ }

"calma"          { yylval.num = 0; return NUM; }
"raiva"          { yylval.num = 1; return NUM; }
"felicidade"     { yylval.num = 2; return NUM; }
"tristeza"       { yylval.num = 3; return NUM; }
"ansiedade"      { yylval.num = 4; return NUM; }
"nojo"           { yylval.num = 5; return NUM; }

"poder"          { return ASSIGN; }
"dever"          { return ASSIGN; }
"realizar"       { return OP_ADD; }
"tornar"         { return OP_SUB; }
"expressar"      { return OP_LT; }
"encontrar"      { return OP_GT; }
"esquecer"       { return OP_EQ; }
"proceder"       { return OP_NE; }

"esse"           { expectvar = 1; return PREVAR; }
"essa"           { expectvar = 1; return PREVAR; }

"concordar"      { return PRINT; }

"aquele"         { yylval.str = strdup("int"); expectvar = 1; return TYPE; }
"aquela"         { yylval.str = strdup("str"); expectvar = 1; return TYPE; }

"se"             { return LPAREN; }
"ou"             { return RPAREN; }
"para"           { return LBRACE; }
"vez"            { return RBRACE; }
"*"              { return RBRACE; }

"sempre"         { return IF; }
"nunca"          { return ELSE; }
"talvez"         { return ELSEIF; }
"parecer"        { return WHILE; }

("pois"|"nada") {
    BEGIN STRING;
    at_start = 1;
    if (string_buffer != NULL) {
        free(string_buffer);
        string_buffer = NULL;
    }
}

"."              { return ENDLINE; }

[a-zA-Z_][a-zA-Z0-9_]* {
    if (expectvar) {
        expectvar = 0;
        yylval.str = strdup(yytext);
        return VAR;
    }
}

[0-9]+           { yylval.num = atoi(yytext); return NUM; }

[ \t\n]+         { }

<STRING>[ \t\n]+ {
    if (at_start) {
        /* Ignora espaços em branco no início da string */
    } else {
        size_t len = string_buffer ? strlen(string_buffer) : 0;
        string_buffer = realloc(string_buffer, len + yyleng + 1);
        if (!string_buffer) {
            fprintf(stderr, "Erro de alocação de memória\n");
            exit(1);
        }
        strncpy(&string_buffer[len], yytext, yyleng);
        string_buffer[len + yyleng] = '\0';
    }
}

<STRING>("nada"|"pois") {
    BEGIN INITIAL;
    yylval.str = string_buffer;
    string_buffer = NULL;
    return STR;
}

<STRING>. {
    size_t len = string_buffer ? strlen(string_buffer) : 0;
    string_buffer = realloc(string_buffer, len + yyleng + 1);
    if (!string_buffer) {
        fprintf(stderr, "Erro de alocação de memória\n");
        exit(1);
    }
    strncpy(&string_buffer[len], yytext, yyleng);
    string_buffer[len + yyleng] = '\0';

    if (at_start) {
        at_start = 0;
    }
}

<STRING><<EOF>> {
    fprintf(stderr, "Erro: Fim de arquivo inesperado na string\n");
    exit(1);
}

%%













